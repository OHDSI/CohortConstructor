[{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a00_introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"CohortConstructor package designed support cohort building pipelines. using package general workflow first build set base cohorts subsequently apply inclusion criteria derive final study cohorts interest. Base cohorts built domain (rather cohort definition) one base cohort many study cohorts can derived.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a00_introduction.html","id":"building-a-cohort-set-by-domain","dir":"Articles","previous_headings":"","what":"Building a cohort set by domain","title":"Introduction","text":"Let´s say want build 5 cohorts 3 (asthma, copd, diabetes) defined based concepts seen condition occurrence table 2 (acetaminophen warfarin) based concepts recorded drug exposure table. can build cohorts independently, one . However, approach mean repeated 3 joins condition occurrence tables 2 joins drug exposure table. make less computationally expensive, instead create cohorts domain. case instead make one join condition occurrence table one drug exposure.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a00_introduction.html","id":"deriving-study-cohorts-from-base-cohorts","dir":"Articles","previous_headings":"","what":"Deriving study cohorts from base cohorts","title":"Introduction","text":"making study cohorts often concept sets define clinical event along various study-specific inclusion criteria, example criteria around amount prior observation age. Often may sensitivity analysis concept set remains inclusion criteria change. situations can make cohorts one--one. However, can lead duplication can see example identify asthma records multiple times. alternative approach build base cohort, case based asthma records, derive multiple cohorts different inclusion criteria applied.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a00_introduction.html","id":"considerations-when-building-cohort-pipelines","dir":"Articles","previous_headings":"","what":"Considerations when building cohort pipelines","title":"Introduction","text":"CohortConstructor provides means building cohorts via pipeline, cohorts created application sequence functions. important note order sequence often important implications. example just one individual three recorded diagnoses asthma. One diagnosis 2008 two 2009, last coming individual´s 18th birthday. three cohort pipelines shown restrictions around calendar dates, age, record first. cohort pipeline , however, individual included final cohort, third diagnosis used cohort start. pipeline B C individual excluded.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a01_building_base_cohorts.html","id":"concept-based-cohort-creation","dir":"Articles","previous_headings":"","what":"Concept based cohort creation","title":"Building base cohorts","text":"","code":"drug_codes <- getDrugIngredientCodes(cdm,                                       name = c(\"diclofenac\", \"acetaminophen\"))  cdm$medications <- conceptCohort(cdm = cdm,                               conceptSet = drug_codes,                               name = \"medications\")  settings(cdm$medications) #> # A tibble: 2 × 2 #>   cohort_definition_id cohort_name   #>                  <int> <chr>         #> 1                    1 diclofenac    #> 2                    2 acetaminophen cohortCount(cdm$medications) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1            830             830 #> 2                    2          13839            2679"},{"path":[]},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a01_building_base_cohorts.html","id":"demographic-based-cohort-creation","dir":"Articles","previous_headings":"","what":"Demographic based cohort creation","title":"Building base cohorts","text":"","code":"cdm$working_age_cohort <- demographicsCohort(cdm = cdm,                                   ageRange = c(18, 65),                                   name = \"working_age_cohort\")  settings(cdm$working_age_cohort) #> # A tibble: 1 × 4 #>   cohort_definition_id cohort_name        require_min_age require_max_age #>                  <int> <chr>                        <dbl>           <dbl> #> 1                    1 demographics_18_65              18              65 cohortCount(cdm$working_age_cohort) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1           2694            2694 attrition(cdm$working_age_cohort) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1           2694            2694         1 Initial qualify… #> 2                    1           2694            2694         2 Trim age_group   #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a02_applying_cohort_restrictions.html","id":"keep-only-the-first-record-per-person","dir":"Articles","previous_headings":"","what":"Keep only the first record per person","title":"Applying cohort restrictions","text":"Individuals can contribute multiple records per cohort. However now ’ll keep earliest cohort entry remaining records using requireIsFirstEntry() CohortConstructor. can see one record per person cohort. Note, applying criteria later applying criteria result different result. ’re requiring individuals meet inclusion criteria time first use diclofenac acetaminophen.","code":"cdm$medications <- cdm$medications %>%    requireIsFirstEntry(indexDate = \"cohort_start_date\")  cohortCount(cdm$medications) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1            830             830 #> 2                    2           2575            2575"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a02_applying_cohort_restrictions.html","id":"applying-restrictions-on-patient-demographics","dir":"Articles","previous_headings":"","what":"Applying restrictions on patient demographics","title":"Applying cohort restrictions","text":"Using requireDemographics() ’ll require individuals medications cohort female , relative cohort start date, 18 85 least 30 days prior observation time database. can see many people people excluded based demographic requirements.","code":"cdm$medications <- cdm$medications %>%    requireDemographics(indexDate = \"cohort_start_date\",                        ageRange = list(c(18, 85)),                       sex = \"Female\",                        minPriorObservation = 30) cohort_attrition(cdm$medications) %>%    dplyr::filter(reason == \"Demographic requirements\") %>%    dplyr::glimpse() #> Rows: 0 #> Columns: 7 #> $ cohort_definition_id <int>  #> $ number_records       <int>  #> $ number_subjects      <int>  #> $ reason_id            <int>  #> $ reason               <chr>  #> $ excluded_records     <int>  #> $ excluded_subjects    <int>"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a02_applying_cohort_restrictions.html","id":"restrictions-on-calendar-dates","dir":"Articles","previous_headings":"","what":"Restrictions on calendar dates","title":"Applying cohort restrictions","text":"Next can use requireInDateRange() keep records cohort entry particular date range. , can track cohort attrition","code":"cdm$medications <- cdm$medications %>%    requireInDateRange(indexDate = \"cohort_start_date\",                       dateRange = as.Date(c(\"2000-01-01\", \"2015-01-01\"))) cohort_attrition(cdm$medications) %>%    dplyr::filter(reason == \"cohort_start_date between 2000-01-01 and 2015-01-01\") %>%    dplyr::glimpse() #> Rows: 0 #> Columns: 7 #> $ cohort_definition_id <int>  #> $ number_records       <int>  #> $ number_subjects      <int>  #> $ reason_id            <int>  #> $ reason               <chr>  #> $ excluded_records     <int>  #> $ excluded_subjects    <int>"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a02_applying_cohort_restrictions.html","id":"restrictions-on-cohort-presence","dir":"Articles","previous_headings":"","what":"Restrictions on cohort presence","title":"Applying cohort restrictions","text":"require individuals medication cohorts history GI bleed. can use requireCohortIntersectFlag() function. Instead requiring individuals history GI bleed, instead require don’t history . case can use requireCohortIntersectFlag() function, time set negate argument FALSE require individuals’ absence cohort rather presence .","code":"cdm$medications_gi_bleed <- cdm$medications  %>%   requireCohortIntersectFlag(targetCohortTable = \"gi_bleed\",                               targetCohortId = 1,                              indexDate = \"cohort_start_date\",                               window = c(-Inf, 0)) %>%    dplyr::compute(temporary = FALSE, name = \"medications_gi_bleed\") cohort_count(cdm$medications_gi_bleed) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              0               0 #> 2                    2              7               7 cdm$medications_no_gi_bleed <- cdm$medications %>%   requireCohortIntersectFlag(targetCohortTable = \"gi_bleed\",                               targetCohortId = 1,                              indexDate = \"cohort_start_date\",                               window = c(-Inf, 0),                               negate = TRUE) %>%    dplyr::compute(temporary = FALSE, name = \"medications_no_gi_bleed\") cohort_count(cdm$medications_no_gi_bleed) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              0               0 #> 2                    2              0               0"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a03_age_sex_matching.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Generate a matched age and sex cohort","text":"CohortConstructor packages includes function obtain age sex matched cohort, generateMatchedCohortSet() function. vignette, explore usage function.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a03_age_sex_matching.html","id":"create-mock-data","dir":"Articles","previous_headings":"Introduction","what":"Create mock data","title":"Generate a matched age and sex cohort","text":"first use mockDrugUtilisation() function DrugUtilisation package create mock data. use cohort1 explore generateMatchedCohortSet(), let us first use cohort_attrition() CDMConnector package explore cohort:","code":"library(CohortConstructor) library(dplyr) library(DrugUtilisation)  cdm <- mockDrugUtilisation(numberIndividual = 1000) CDMConnector::cohort_set(cdm$cohort1)"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a03_age_sex_matching.html","id":"use-generatematchedcohortset-to-create-an-age-sex-matched-cohort","dir":"Articles","previous_headings":"","what":"Use generateMatchedCohortSet() to create an age-sex matched cohort","title":"Generate a matched age and sex cohort","text":"Let us first see example function works. usage, need provide cdm object, targetCohortName, name table containing cohort interest, name new generated tibble containing cohort matched cohort. also use argument targetCohortId specify want matched cohort cohort_definition_id = 1. Notice generated tibble, two cohorts: cohort_definition_id = 1 (original cohort), cohort_definition_id = 4 (matched cohort). target_cohort_name column indicates original cohort. match_sex match_year_of_birth adopt boolean values (TRUE/FALSE) indicating matched sex age, . match_status indicate original cohort (target) matched cohort (matched). target_cohort_id indicates cohort_id original cohort. Check exclusion criteria applied generate new cohorts using cohort_attrition() CDMConnector package: Briefly, original cohort, exclude first individuals match, individuals matching pair observation assigned cohort_start_date. matched cohort, start whole database first exclude individuals original cohort. Afterwards, exclude individuals match, individuals observation assigned cohort_start_date, finally remove many individuals required fulfill ratio. Notice matching pairs randomly assigned, probable every time execute function, generated cohorts change. Use set.seed() avoid .","code":"cdm$matched_cohort1 <- matchCohorts(   cohort = cdm$cohort1,   cohortId = 1,   name = \"matched_cohort1\")  CDMConnector::cohort_set(cdm$matched_cohort1) # Original cohort CDMConnector::cohort_attrition(cdm$matched_cohort1) %>% filter(cohort_definition_id == 1)  # Matched cohort CDMConnector::cohort_attrition(cdm$matched_cohort1) %>% filter(cohort_definition_id == 4)"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a03_age_sex_matching.html","id":"matchsex-parameter","dir":"Articles","previous_headings":"Use generateMatchedCohortSet() to create an age-sex matched cohort","what":"matchSex parameter","title":"Generate a matched age and sex cohort","text":"matchSex boolean parameter (TRUE/FALSE) indicating want match sex (TRUE) want (FALSE).","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a03_age_sex_matching.html","id":"matchyear-parameter","dir":"Articles","previous_headings":"Use generateMatchedCohortSet() to create an age-sex matched cohort","what":"matchYear parameter","title":"Generate a matched age and sex cohort","text":"matchYear another boolean parameter (TRUE/FALSE) indicating want match age (TRUE) want (FALSE). Notice matchSex = FALSE matchYear = FALSE, obtain unmatched comparator cohort.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a03_age_sex_matching.html","id":"ratio-parameter","dir":"Articles","previous_headings":"Use generateMatchedCohortSet() to create an age-sex matched cohort","what":"ratio parameter","title":"Generate a matched age and sex cohort","text":"default matching ratio 1:1 (ratio = 1). Use cohort_counts() CDMConnector check matching done desired. can modify ratio parameter tailor matched cohort. ratio can adopt values 1 Inf.","code":"CDMConnector::cohort_count(cdm$matched_cohort1) cdm$matched_cohort2 <- matchCohorts(   cohort = cdm$cohort1,   cohortId = 1,   name = \"matched_cohort2\",   ratio = Inf)  CDMConnector::cohort_count(cdm$matched_cohort2)"},{"path":"https://ohdsi.github.io/CohortConstructor/articles/a03_age_sex_matching.html","id":"generate-matched-cohorts-simultaneously-across-multiple-cohorts","dir":"Articles","previous_headings":"Use generateMatchedCohortSet() to create an age-sex matched cohort","what":"Generate matched cohorts simultaneously across multiple cohorts","title":"Generate a matched age and sex cohort","text":"functionalities can implemented across multiple cohorts simultaneously. Specify targetCohortId parameter cohorts interest. set NULL, cohorts present targetCohortName matched. Notice cohort (independent cohorts) matched cohort.","code":"cdm$matched_cohort3 <- matchCohorts(   cohort = cdm$cohort1,   cohortId = c(1,3),   name = \"matched_cohort3\",   ratio = 2)  CDMConnector::cohort_set(cdm$matched_cohort3) %>% arrange(cohort_definition_id)  CDMConnector::cohort_count(cdm$matched_cohort3) %>% arrange(cohort_definition_id)"},{"path":"https://ohdsi.github.io/CohortConstructor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer. Marti Catala. Author. Marta Alcalde-Herraiz. Author. Yuchen Guo. Author. Nuria Mercade-Besora. Author.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E, Catala M, Alcalde-Herraiz M, Guo Y, Mercade-Besora N (2024). CohortConstructor: Work Cohorts Using Common Data Model. R package version 0.0.1, https://ohdsi.github.io/CohortConstructor/.","code":"@Manual{,   title = {CohortConstructor: Work With Cohorts Using a Common Data Model},   author = {Edward Burn and Marti Catala and Marta Alcalde-Herraiz and Yuchen Guo and Nuria Mercade-Besora},   year = {2024},   note = {R package version 0.0.1},   url = {https://ohdsi.github.io/CohortConstructor/}, }"},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"cohortconstructor","dir":"","previous_headings":"","what":"Work With Cohorts Using a Common Data Model","title":"Work With Cohorts Using a Common Data Model","text":"package currently experimental currently recommended use. goal CohortConstructor support creation manipulation cohorts OMOP Common Data Model.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Work With Cohorts Using a Common Data Model","text":"can install development version CohortConstructor GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ohdsi/CohortConstructor\")"},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"creating-and-manipulating-cohorts","dir":"","previous_headings":"","what":"Creating and manipulating cohorts","title":"Work With Cohorts Using a Common Data Model","text":"illustrate functionality let’s create CDM reference Eunomia dataset Using CDMConnector package.","code":"library(CDMConnector) library(PatientProfiles) #> Warning: package 'PatientProfiles' was built under R version 4.2.3 library(dplyr) #> Warning: package 'dplyr' was built under R version 4.2.3 library(CohortConstructor)  con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomia_dir()) cdm <- cdm_from_con(con, cdm_schema = \"main\",                      write_schema = c(prefix = \"my_study_\", schema = \"main\")) print(cdm)"},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"generating-concept-based-cohorts","dir":"","previous_headings":"Creating and manipulating cohorts","what":"Generating concept based cohorts","title":"Work With Cohorts Using a Common Data Model","text":"start making concept based cohort. need provide concept sets get cohort back, cohort end date event date associated records, overlapping records collapsed, records observation kept. can see starting cohorts, add additional restrictions, following associated settings, counts, attrition.","code":"cdm$fractures <- cdm |>    conceptCohort(conceptSet = list(     \"ankle_fracture\" = 4059173,     \"forearm_fracture\" = 4278672,     \"hip_fracture\" = 4230399),   name = \"fractures\") settings(cdm$fractures) %>% glimpse() #> Rows: 3 #> Columns: 2 #> $ cohort_definition_id <int> 1, 2, 3 #> $ cohort_name          <chr> \"ankle_fracture\", \"forearm_fracture\", \"hip_fractu… cohort_count(cdm$fractures) %>% glimpse() #> Rows: 3 #> Columns: 3 #> $ cohort_definition_id <int> 1, 2, 3 #> $ number_records       <int> 464, 569, 138 #> $ number_subjects      <int> 427, 510, 132 attrition(cdm$fractures) %>% glimpse() #> Rows: 3 #> Columns: 7 #> $ cohort_definition_id <int> 1, 2, 3 #> $ number_records       <int> 464, 569, 138 #> $ number_subjects      <int> 427, 510, 132 #> $ reason_id            <int> 1, 1, 1 #> $ reason               <chr> \"Initial qualifying events\", \"Initial qualifying … #> $ excluded_records     <int> 0, 0, 0 #> $ excluded_subjects    <int> 0, 0, 0"},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"require-in-date-range","dir":"","previous_headings":"Creating and manipulating cohorts","what":"Require in date range","title":"Work With Cohorts Using a Common Data Model","text":"created base cohort, can start applying additional cohort requirements. example, first can require individuals’ cohort start date fall within certain date range. Now ’ve applied date restriction, can see cohort attributes updated","code":"cdm$fractures <- cdm$fractures %>%    requireInDateRange(dateRange = as.Date(c(\"2000-01-01\", \"2020-01-01\"))) cohort_count(cdm$fractures) %>% glimpse() #> Rows: 3 #> Columns: 3 #> $ cohort_definition_id <int> 1, 2, 3 #> $ number_records       <int> 108, 152, 62 #> $ number_subjects      <int> 104, 143, 60 attrition(cdm$fractures) %>%    filter(reason == \"cohort_start_date between 2000-01-01 & 2020-01-01\") %>%    glimpse() #> Rows: 3 #> Columns: 7 #> $ cohort_definition_id <int> 1, 2, 3 #> $ number_records       <int> 108, 152, 62 #> $ number_subjects      <int> 104, 143, 60 #> $ reason_id            <int> 2, 2, 2 #> $ reason               <chr> \"cohort_start_date between 2000-01-01 & 2020-01-0… #> $ excluded_records     <int> 356, 417, 76 #> $ excluded_subjects    <int> 323, 367, 72"},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"applying-demographic-requirements","dir":"","previous_headings":"Creating and manipulating cohorts","what":"Applying demographic requirements","title":"Work With Cohorts Using a Common Data Model","text":"can also add restrictions patient characteristics age (cohort start date default) sex. can see many individuals ’ve lost applying criteria.","code":"cdm$fractures <- cdm$fractures %>%    requireDemographics(ageRange = list(c(40, 65)),                       sex = \"Female\") attrition(cdm$fractures) %>%    filter(reason == \"Age requirement: 40 to 65\") %>%    glimpse() #> Rows: 3 #> Columns: 7 #> $ cohort_definition_id <int> 1, 2, 3 #> $ number_records       <int> 43, 64, 22 #> $ number_subjects      <int> 43, 62, 22 #> $ reason_id            <int> 3, 3, 3 #> $ reason               <chr> \"Age requirement: 40 to 65\", \"Age requirement: 40… #> $ excluded_records     <int> 65, 88, 40 #> $ excluded_subjects    <int> 61, 81, 38  attrition(cdm$fractures) %>%    filter(reason == \"Sex requirement: Female\") %>%    glimpse() #> Rows: 3 #> Columns: 7 #> $ cohort_definition_id <int> 1, 2, 3 #> $ number_records       <int> 19, 37, 12 #> $ number_subjects      <int> 19, 36, 12 #> $ reason_id            <int> 4, 4, 4 #> $ reason               <chr> \"Sex requirement: Female\", \"Sex requirement: Fema… #> $ excluded_records     <int> 24, 27, 10 #> $ excluded_subjects    <int> 24, 26, 10"},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"require-presence-in-another-cohort","dir":"","previous_headings":"Creating and manipulating cohorts","what":"Require presence in another cohort","title":"Work With Cohorts Using a Common Data Model","text":"can also require individuals another cohort window. example require study participants GI bleed cohort time prior entry fractures cohort.","code":"cdm$gibleed <- cdm |>    conceptCohort(conceptSet = list(\"gibleed\" = 192671),   name = \"gibleed\")  cdm$fractures <- cdm$fractures %>%    requireCohortIntersectFlag(targetCohortTable = \"gibleed\",                              window = c(-Inf, 0)) attrition(cdm$fractures) %>%    filter(reason == \"In cohort gibleed between -Inf & 0 days relative to cohort_start_date\") %>%    glimpse() #> Rows: 3 #> Columns: 7 #> $ cohort_definition_id <int> 1, 2, 3 #> $ number_records       <int> 5, 7, 2 #> $ number_subjects      <int> 5, 6, 2 #> $ reason_id            <int> 7, 7, 7 #> $ reason               <chr> \"In cohort gibleed between -Inf & 0 days relative… #> $ excluded_records     <int> 14, 30, 10 #> $ excluded_subjects    <int> 14, 30, 10"},{"path":"https://ohdsi.github.io/CohortConstructor/index.html","id":"combining-cohorts","dir":"","previous_headings":"Creating and manipulating cohorts","what":"Combining cohorts","title":"Work With Cohorts Using a Common Data Model","text":"Currently separate fracture cohorts. Let’s say want create cohort people fractures. create cohort like :","code":"cdm$fractures <- cdm$fractures |>    CohortConstructor::unionCohorts()  settings(cdm$fractures) #> # A tibble: 1 × 3 #>   cohort_definition_id cohort_name                                    gap #>                  <dbl> <chr>                                        <dbl> #> 1                    1 ankle_fracture_forearm_fracture_hip_fracture     0 cohortCount(cdm$fractures) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1             14              13 cdmDisconnect(cdm)"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/CohortConstructor-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CohortConstructor: Work With Cohorts Using a Common Data Model — CohortConstructor-package","title":"CohortConstructor: Work With Cohorts Using a Common Data Model — CohortConstructor-package","text":"package aims provide functionalities manipulate evaluate cohorts data mapped Observational Medical Outcomes Partnership Common Data Model.","code":""},{"path":[]},{"path":"https://ohdsi.github.io/CohortConstructor/reference/CohortConstructor-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CohortConstructor: Work With Cohorts Using a Common Data Model — CohortConstructor-package","text":"Maintainer: Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) Authors: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID) Marta Alcalde-Herraiz marta.alcaldeherraiz@ndorms.ox.ac.uk (ORCID) Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) Nuria Mercade-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID)","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/conceptCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cohorts based on a concept set — conceptCohort","title":"Create cohorts based on a concept set — conceptCohort","text":"Create cohorts based concept set","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/conceptCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cohorts based on a concept set — conceptCohort","text":"","code":"conceptCohort(cdm, conceptSet, name)"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/conceptCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cohorts based on a concept set — conceptCohort","text":"cdm cdm reference. conceptSet conceptSet, can either codelist, codelist conceptSetExpression. name Name cohort cdm object.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/conceptCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cohorts based on a concept set — conceptCohort","text":"cohort table","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/conceptCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cohorts based on a concept set — conceptCohort","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor(conditionOccurrence = TRUE)  cohort <- conceptCohort(cdm = cdm, conceptSet = list(a = 1), name = \"cohort\") #> ℹ Subsetting table condition_occurrence using 1 concept with domain: condition. #> ℹ Collapsing records. #> ℹ Creating cohort attributes. #> ✔ Cohort cohort created.  cohort |> attrition() #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              7               7         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/demographicsCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cohorts based on patient demographics — demographicsCohort","title":"Create cohorts based on patient demographics — demographicsCohort","text":"Create cohorts based patient demographics","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/demographicsCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cohorts based on patient demographics — demographicsCohort","text":"","code":"demographicsCohort(   cdm,   name,   ageRange = NULL,   sex = NULL,   minPriorObservation = NULL,   minFutureObservation = NULL )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/demographicsCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cohorts based on patient demographics — demographicsCohort","text":"cdm cdm reference. name Name new cohort table ageRange list vectors specifying minimum maximum age. sex Can \"\", \"Male\" \"Female\". minPriorObservation minimum number prior observation days database. minFutureObservation minimum number future observation days database.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/demographicsCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cohorts based on patient demographics — demographicsCohort","text":"cohort table","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/demographicsCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cohorts based on patient demographics — demographicsCohort","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor()  cohort <-  cdm |> demographicsCohort(name = \"cohort3\", ageRange = c(18,40), sex = \"Male\") #> ℹ Building new trimmed cohort #> Adding birth date #> Adding demographics information #> Creating initial cohort #> Trim sex #> Trim age #> ✔ Cohort trimmed  attrition(cohort) #> # A tibble: 3 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1             10              10         1 Initial qualify… #> 2                    1              5               5         2 Restrict sex     #> 3                    1              4               4         3 Trim age_group   #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/erafy.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse cohort entries using a certain gap to concatenate records. — erafy","title":"Collapse cohort entries using a certain gap to concatenate records. — erafy","text":"Collapse cohort entries using certain gap concatenate records.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/erafy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse cohort entries using a certain gap to concatenate records. — erafy","text":"","code":"erafy(cohort, cohortId = NULL, gap = 0, name = tableName(cohort))"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/erafy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse cohort entries using a certain gap to concatenate records. — erafy","text":"cohort cohort table cohortId cohort definition ids subset, NULL cohort definition ids used. gap Number days use merging cohort entries. name Name cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/erafy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse cohort entries using a certain gap to concatenate records. — erafy","text":"cohort table","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtDeath.html","id":null,"dir":"Reference","previous_headings":"","what":"Set cohort end date to death date — exitAtDeath","title":"Set cohort end date to death date — exitAtDeath","text":"functions changes cohort end date subject's death date. case generates overlapping records cohort, overlapping entries merged.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtDeath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set cohort end date to death date — exitAtDeath","text":"","code":"exitAtDeath(   cohort,   cohortId = NULL,   requireDeath = FALSE,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtDeath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set cohort end date to death date — exitAtDeath","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. requireDeath TRUE, subjects without death record dropped, FALSE end date left . name Name new cohort restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtDeath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set cohort end date to death date — exitAtDeath","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtDeath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set cohort end date to death date — exitAtDeath","text":"","code":"library(PatientProfiles) library(CohortConstructor) cdm <- mockPatientProfiles() cdm$cohort1 |> exitAtDeath() #> # Source:   SQL [10 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    2          7 2038-10-14        2096-03-11      #>  2                    2          3 2208-05-19        2219-07-06      #>  3                    3          5 1963-11-03        1994-05-28      #>  4                    3          6 2050-01-10        2066-10-30      #>  5                    2          2 2045-05-03        2082-08-31      #>  6                    2          4 2135-03-05        2181-04-08      #>  7                    1          8 2155-08-13        2175-06-23      #>  8                    1          1 1976-01-13        2050-08-25      #>  9                    3         10 2005-04-12        2014-09-28      #> 10                    2          9 2017-04-09        2046-03-09"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtFirstDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Set cohort end date to the first of a set of column dates — exitAtFirstDate","title":"Set cohort end date to the first of a set of column dates — exitAtFirstDate","text":"Set cohort end date first set column dates","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtFirstDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set cohort end date to the first of a set of column dates — exitAtFirstDate","text":"","code":"exitAtFirstDate(   cohort,   dateColumns,   cohortId = NULL,   returnReason = TRUE,   name = tableName(cohort),   .softValidation = FALSE )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtFirstDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set cohort end date to the first of a set of column dates — exitAtFirstDate","text":"cohort cohort table cdm reference. dateColumns Date columns cohort table consider. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. returnReason TRUE return column stating column dateColumns used new cohort end date. name Name new cohort restriction. .softValidation Whether perform soft validation consistency. set FALSE four additional checks performed: 1) check cohort end date cohort start date, 2) check missing values required columns, 3) check cohort duration within observation period, 4) overlapping cohort entries","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtFirstDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set cohort end date to the first of a set of column dates — exitAtFirstDate","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtFirstDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set cohort end date to the first of a set of column dates — exitAtFirstDate","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor(tables = list( \"cohort\" = dplyr::tibble(   cohort_definition_id = 1,   subject_id = c(1, 2, 3, 4),   cohort_start_date = as.Date(c(\"2000-06-03\", \"2000-01-01\", \"2015-01-15\", \"2000-12-09\")),   cohort_end_date = as.Date(c(\"2001-09-01\", \"2001-01-12\", \"2015-02-15\", \"2002-12-09\")),   date_1 = as.Date(c(\"2001-08-01\", \"2001-01-01\", \"2015-01-15\", \"2002-12-09\")),   date_2 = as.Date(c(\"2001-08-01\", NA, \"2015-04-15\", \"2002-12-09\")) ) )) cdm$cohort |> exitAtFirstDate(dateColumns = c(\"date_1\", \"date_2\")) #> # Source:   table<main.cohort> [4 x 5] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date exit_reason  #>                  <dbl>      <dbl> <date>            <date>          <chr>        #> 1                    1          3 2015-01-15        2015-01-15      date_1       #> 2                    1          4 2000-12-09        2002-12-09      date_1; dat… #> 3                    1          1 2000-06-03        2001-08-01      date_1; dat… #> 4                    1          2 2000-01-01        2001-01-01      date_1"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtLastDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Set cohort end date to the first of a set of column dates — exitAtLastDate","title":"Set cohort end date to the first of a set of column dates — exitAtLastDate","text":"Set cohort end date first set column dates","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtLastDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set cohort end date to the first of a set of column dates — exitAtLastDate","text":"","code":"exitAtLastDate(   cohort,   dateColumns,   cohortId = NULL,   returnReason = TRUE,   name = tableName(cohort),   .softValidation = FALSE )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtLastDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set cohort end date to the first of a set of column dates — exitAtLastDate","text":"cohort cohort table cdm reference. dateColumns description cohortId Vector cohort definition ids include. NULL, cohort definition ids used. returnReason TRUE return column stating column dateColumns used new cohort end date. description name Name new cohort restriction. .softValidation Whether perform soft validation consistency. set FALSE four additional checks performed: 1) check cohort end date cohort start date, 2) check missing values required columns, 3) check cohort duration within observation period, 4) overlapping cohort entries","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtLastDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set cohort end date to the first of a set of column dates — exitAtLastDate","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtLastDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set cohort end date to the first of a set of column dates — exitAtLastDate","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor(tables = list( \"cohort\" = dplyr::tibble(   cohort_definition_id = 1,   subject_id = c(1, 2, 3, 4),   cohort_start_date = as.Date(c(\"2000-06-03\", \"2000-01-01\", \"2015-01-15\", \"2000-12-09\")),   cohort_end_date = as.Date(c(\"2001-09-01\", \"2001-01-12\", \"2015-02-15\", \"2002-12-09\")),   date_1 = as.Date(c(\"2001-08-01\", \"2001-01-01\", \"2015-01-15\", \"2002-12-09\")),   date_2 = as.Date(c(\"2001-08-01\", NA, \"2015-04-15\", \"2002-12-09\")) ) )) cdm$cohort |> exitAtLastDate(dateColumns = c(\"date_1\", \"date_2\")) #> # Source:   table<main.cohort> [4 x 5] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date exit_reason  #>                  <dbl>      <dbl> <date>            <date>          <chr>        #> 1                    1          2 2000-01-01        2001-01-01      date_1       #> 2                    1          4 2000-12-09        2002-12-09      date_2; dat… #> 3                    1          3 2015-01-15        2015-04-15      date_2       #> 4                    1          1 2000-06-03        2001-08-01      date_2; dat…"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtObservationEnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Set cohort end date to end of observation — exitAtObservationEnd","title":"Set cohort end date to end of observation — exitAtObservationEnd","text":"functions changes cohort end date end date observation period corresponding cohort entry. case generates overlapping records cohort, overlapping entries merged.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtObservationEnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set cohort end date to end of observation — exitAtObservationEnd","text":"","code":"exitAtObservationEnd(cohort, cohortId = NULL, name = tableName(cohort))"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtObservationEnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set cohort end date to end of observation — exitAtObservationEnd","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. name Name new cohort restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtObservationEnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set cohort end date to end of observation — exitAtObservationEnd","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/exitAtObservationEnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set cohort end date to end of observation — exitAtObservationEnd","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor() cdm$cohort1 |> exitAtObservationEnd() #> # Source:   table<main.cohort1> [6 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          2 2000-05-04        2003-06-15      #> 2                    1          4 1996-06-30        2013-12-31      #> 3                    1          3 2015-01-27        2015-10-11      #> 4                    1          5 2012-03-20        2013-02-10      #> 5                    1          1 2001-05-30        2013-06-29      #> 6                    1          7 2014-03-07        2014-04-09"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/intersectCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a combination cohort set between the intersection of different cohorts. — intersectCohorts","title":"Generate a combination cohort set between the intersection of different cohorts. — intersectCohorts","text":"Generate combination cohort set intersection different cohorts.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/intersectCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a combination cohort set between the intersection of different cohorts. — intersectCohorts","text":"","code":"intersectCohorts(   cohort,   cohortId = NULL,   gap = 0,   mutuallyExclusive = FALSE,   returnOnlyComb = FALSE,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/intersectCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a combination cohort set between the intersection of different cohorts. — intersectCohorts","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. gap Number days two subsequent cohort entries merged single cohort record. mutuallyExclusive Whether generated cohorts mutually exclusive . returnOnlyComb Whether get combination cohort back name Name new cohort demographic requirements.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/intersectCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a combination cohort set between the intersection of different cohorts. — intersectCohorts","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/intersectCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a combination cohort set between the intersection of different cohorts. — intersectCohorts","text":"","code":"# \\donttest{ library(CohortConstructor)  cdm <- mockCohortConstructor(nPerson = 100)  cdm$cohort3 <- intersectCohorts(   cohort = cdm$cohort2,   name = \"cohort3\", )  settings(cdm$cohort3) #> # A tibble: 3 × 6 #>   cohort_definition_id cohort_name    cohort_1 cohort_2 mutually_exclusive   gap #>                  <int> <chr>             <dbl>    <dbl> <lgl>              <dbl> #> 1                    1 cohort_1              1        0 FALSE                  0 #> 2                    2 cohort_2              0        1 FALSE                  0 #> 3                    3 cohort_1_coho…        1        1 FALSE                  0  # }"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/matchCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a new cohort matched cohort from a preexisting target cohort. The new cohort will contain individuals not included in the target cohort with same year of birth (matchYearOfBirth = TRUE) and same sex (matchSex = TRUE). — matchCohorts","title":"Generate a new cohort matched cohort from a preexisting target cohort. The new cohort will contain individuals not included in the target cohort with same year of birth (matchYearOfBirth = TRUE) and same sex (matchSex = TRUE). — matchCohorts","text":"Generate new cohort matched cohort preexisting target cohort. new cohort contain individuals included target cohort year birth (matchYearOfBirth = TRUE) sex (matchSex = TRUE).","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/matchCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a new cohort matched cohort from a preexisting target cohort. The new cohort will contain individuals not included in the target cohort with same year of birth (matchYearOfBirth = TRUE) and same sex (matchSex = TRUE). — matchCohorts","text":"","code":"matchCohorts(   cohort,   cohortId = NULL,   matchSex = TRUE,   matchYearOfBirth = TRUE,   ratio = 1,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/matchCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a new cohort matched cohort from a preexisting target cohort. The new cohort will contain individuals not included in the target cohort with same year of birth (matchYearOfBirth = TRUE) and same sex (matchSex = TRUE). — matchCohorts","text":"cohort cohort table cdm reference. cohortId Cohort definition id match target cohort. NULL cohort definition id present target cohort matched. matchSex Whether match sex. matchYearOfBirth Whether match year birth. ratio Number allowed matches per individual target cohort. name Name new generated cohort set.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/matchCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a new cohort matched cohort from a preexisting target cohort. The new cohort will contain individuals not included in the target cohort with same year of birth (matchYearOfBirth = TRUE) and same sex (matchSex = TRUE). — matchCohorts","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/matchCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a new cohort matched cohort from a preexisting target cohort. The new cohort will contain individuals not included in the target cohort with same year of birth (matchYearOfBirth = TRUE) and same sex (matchSex = TRUE). — matchCohorts","text":"","code":"library(CohortConstructor) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union cdm <- mockCohortConstructor(nPerson = 200) cdm$new_matched_cohort <- cdm$cohort2 |>   matchCohorts(     name = \"new_matched_cohort\",     cohortId = 2,     matchSex = TRUE,     matchYearOfBirth = TRUE,     ratio = 1) #> Starting matching #> ℹ Creating copy of target cohort. #> • 1 cohort to be matched. #> ℹ Creating controls cohorts. #> ℹ Excluding cases from controls #> • Matching by gender_concept_id and year_of_birth #> • Removing controls that were not in observation at index date #> • Excluding target records whose pair is not in observation #> • Adjusting ratio #> Binding both cohorts #> ✔ Done cdm$new_matched_cohort #> # Source:   table<main.new_matched_cohort> [?? x 5] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date cluster_id #>                   <int>      <int> <date>            <date>               <dbl> #>  1                    1        118 1975-11-28        1981-05-30               6 #>  2                    1         56 2007-09-28        2008-07-15              18 #>  3                    1         63 2008-08-23        2008-09-02              19 #>  4                    1         20 1985-08-15        1990-06-06              27 #>  5                    1        117 2002-09-07        2003-04-27              30 #>  6                    1         19 2003-06-22        2005-07-21              35 #>  7                    1         84 2000-04-13        2006-06-11              42 #>  8                    1         24 2016-12-17        2016-12-29              59 #>  9                    1        119 1978-01-10        1982-09-07              65 #> 10                    1         62 2017-04-27        2018-07-04              74 #> # ℹ more rows"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/mockCohortConstructor.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a mock cdm reference for CohortConstructor — mockCohortConstructor","title":"Function to create a mock cdm reference for CohortConstructor — mockCohortConstructor","text":"Function create mock cdm reference CohortConstructor","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/mockCohortConstructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a mock cdm reference for CohortConstructor — mockCohortConstructor","text":"","code":"mockCohortConstructor(   nPerson = 10,   conceptTable = NULL,   tables = NULL,   conceptId = NULL,   conceptIdClass = NULL,   drugExposure = F,   conditionOccurrence = F,   death = F,   con = DBI::dbConnect(duckdb::duckdb()) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/mockCohortConstructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a mock cdm reference for CohortConstructor — mockCohortConstructor","text":"nPerson number person cdm conceptTable user defined concept table tables list tables include cdm conceptId list concept id conceptIdClass domain class conceptId drugExposure T/F include drug exposure table cdm conditionOccurrence T/F include condition occurrence cdm death T/F include death table cdm con db connection detail copy databases","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/mockCohortConstructor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a mock cdm reference for CohortConstructor — mockCohortConstructor","text":"cdm object","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/mockCohortConstructor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a mock cdm reference for CohortConstructor — mockCohortConstructor","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor()  cdm #>  #> ── # OMOP CDM reference (duckdb) of mock database ────────────────────────────── #> • omop tables: person, observation_period, cdm_source, concept, vocabulary, #> concept_relationship, concept_synonym, concept_ancestor, drug_strength #> • cohort tables: cohort1, cohort2 #> • achilles tables: - #> • other tables: -"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. omopgenerics attrition, cohortCodelist, cohortCount, settings, tableName PatientProfiles endDateColumn, startDateColumn","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort on age — requireAge","title":"Restrict cohort on age — requireAge","text":"Restrict cohort age","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort on age — requireAge","text":"","code":"requireAge(   cohort,   ageRange,   cohortId = NULL,   indexDate = \"cohort_start_date\",   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort on age — requireAge","text":"cohort cohort table cdm reference. ageRange list minimum maximum age. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable cohort contains date compute demographics characteristics restrict . name Name new cohort age requirement.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort on age — requireAge","text":"cohort table records individuals satisfying age requirement","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort on age — requireAge","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor() cdm$cohort1 |>   requireAge(indexDate = \"cohort_start_date\",              ageRange = list(c(18, 65))) #> # Source:   SQL [7 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          2 2000-05-04        2000-05-17      #> 2                    1          2 2000-05-18        2001-01-23      #> 3                    1          3 2015-01-27        2015-06-28      #> 4                    1          5 2012-03-20        2012-04-30      #> 5                    1          5 2012-05-01        2012-07-24      #> 6                    1          7 2014-03-07        2014-03-07      #> 7                    1          7 2014-03-08        2014-03-20"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireCohortIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Require cohort subjects are present in another cohort — requireCohortIntersectFlag","title":"Require cohort subjects are present in another cohort — requireCohortIntersectFlag","text":"Require cohort subjects present another cohort","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireCohortIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require cohort subjects are present in another cohort — requireCohortIntersectFlag","text":"","code":"requireCohortIntersectFlag(   cohort,   targetCohortTable,   window,   cohortId = NULL,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   censorDate = NULL,   negate = FALSE,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireCohortIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require cohort subjects are present in another cohort — requireCohortIntersectFlag","text":"cohort cohort table cdm reference. targetCohortTable Name cohort want check intersect. window Window consider events . cohortId Vector cohort definition ids include. NULL, cohort definition ids used. targetCohortId Vector cohort definition ids include. indexDate Variable x contains date compute intersection. targetStartDate Date reference cohort table, either start (overlap) (incidence). targetEndDate Date reference cohort table, either end (overlap) NULL (incidence). censorDate Whether censor overlap events specific date column date x. negate set TRUE, criteria applied exclusion rather inclusion (.e. require absence another cohort). name Name new cohort future observation restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireCohortIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require cohort subjects are present in another cohort — requireCohortIntersectFlag","text":"Cohort table cohort kept (cohort negate = TRUE)","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireCohortIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Require cohort subjects are present in another cohort — requireCohortIntersectFlag","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor() cdm$cohort1 |>   requireCohortIntersectFlag(targetCohortTable = \"cohort2\",                              targetCohortId = 1,                              indexDate = \"cohort_start_date\",                              window = c(-Inf, 0)) #> # Source:   table<main.cohort1> [10 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          1 2001-05-30        2003-05-01      #>  2                    1          1 2003-05-02        2006-06-10      #>  3                    1          2 2000-05-04        2000-05-17      #>  4                    1          2 2000-05-18        2001-01-23      #>  5                    1          3 2015-01-27        2015-06-28      #>  6                    1          4 1996-06-30        1998-11-20      #>  7                    1          5 2012-03-20        2012-04-30      #>  8                    1          5 2012-05-01        2012-07-24      #>  9                    1          7 2014-03-07        2014-03-07      #> 10                    1          7 2014-03-08        2014-03-20"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireConceptIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Require cohort subjects to have events of a concept list — requireConceptIntersectFlag","title":"Require cohort subjects to have events of a concept list — requireConceptIntersectFlag","text":"Require cohort subjects events concept list","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireConceptIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require cohort subjects to have events of a concept list — requireConceptIntersectFlag","text":"","code":"requireConceptIntersectFlag(   cohort,   conceptSet,   window,   cohortId = NULL,   indexDate = \"cohort_start_date\",   targetStartDate = \"event_start_date\",   targetEndDate = \"event_end_date\",   censorDate = NULL,   negate = FALSE,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireConceptIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require cohort subjects to have events of a concept list — requireConceptIntersectFlag","text":"cohort cohort table cdm reference. conceptSet Concept set list. window Window consider events . cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable x contains date compute intersection. targetStartDate Date reference cohort table, either start (overlap) (incidence). targetEndDate Date reference cohort table, either end (overlap) NULL (incidence). censorDate Whether censor overlap events specific date column date x. negate set TRUE, criteria applied exclusion rather inclusion (.e. require absence another cohort). name Name new cohort future observation restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireConceptIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require cohort subjects to have events of a concept list — requireConceptIntersectFlag","text":"Cohort table  events concept list kept (without event negate = TRUE)","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireConceptIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Require cohort subjects to have events of a concept list — requireConceptIntersectFlag","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor(conditionOccurrence = TRUE) cdm$cohort2 <-  requireConceptIntersectFlag(   cohort = cdm$cohort1,   conceptSet = list(a = 1),   window = c(-Inf, 0),   name = \"cohort2\")"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDeathFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Require cohort subjects' death at a certain time window — requireDeathFlag","title":"Require cohort subjects' death at a certain time window — requireDeathFlag","text":"Require cohort subjects' death certain time window","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDeathFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require cohort subjects' death at a certain time window — requireDeathFlag","text":"","code":"requireDeathFlag(   cohort,   window,   cohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   negate = FALSE,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDeathFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require cohort subjects' death at a certain time window — requireDeathFlag","text":"cohort cohort table cdm reference. window Window consider events . cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable x contains date compute intersection. censorDate Whether censor overlap events specific date column date x. negate set TRUE, criteria applied exclusion rather inclusion (.e. require absence another cohort). name Name new cohort future observation restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDeathFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require cohort subjects' death at a certain time window — requireDeathFlag","text":"Cohort table death event kept (without negate = TRUE)","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDeathFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Require cohort subjects' death at a certain time window — requireDeathFlag","text":"","code":"library(CDMConnector) #>  #> Attaching package: ‘CDMConnector’ #> The following objects are masked from ‘package:CohortConstructor’: #>  #>     intersectCohorts, unionCohorts library(CohortConstructor) cdm <- mockCohortConstructor(death = TRUE) cdm$cohort1 <- cdm$cohort1 |> requireDeathFlag(window = list(c(0, Inf))) attrition(cdm$cohort1) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1             10               6         1 Initial qualify… #> 2                    1             10               6         2 Death between 0… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort on patient demographics — requireDemographics","title":"Restrict cohort on patient demographics — requireDemographics","text":"Restrict cohort patient demographics","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort on patient demographics — requireDemographics","text":"","code":"requireDemographics(   cohort,   cohortId = NULL,   indexDate = \"cohort_start_date\",   ageRange = list(c(0, 150)),   sex = c(\"Both\"),   minPriorObservation = 0,   minFutureObservation = 0,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort on patient demographics — requireDemographics","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable cohort contains date compute demographics characteristics restrict . ageRange list minimum maximum age. sex Can \"\", \"Male\" \"Female\". one latter, sex included. minPriorObservation minimum number prior observation days database. minFutureObservation minimum number future observation days database. name Name new cohort demographic requirements.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort on patient demographics — requireDemographics","text":"cohort table records individuals satisfying demographic requirements","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort on patient demographics — requireDemographics","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor(nPerson = 100) cdm$cohort1 |>   requireDemographics(indexDate = \"cohort_start_date\",                       ageRange = list(c(18, 65)),                       sex = \"Female\",                       minPriorObservation = 365) #> # Source:   SQL [3 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1         32 1991-09-11        2002-11-15      #> 2                    1         38 1990-05-01        1994-07-14      #> 3                    1         85 2000-05-09        2001-11-16"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireFutureObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort on future observation — requireFutureObservation","title":"Restrict cohort on future observation — requireFutureObservation","text":"Restrict cohort future observation","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireFutureObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort on future observation — requireFutureObservation","text":"","code":"requireFutureObservation(   cohort,   minFutureObservation,   cohortId = NULL,   indexDate = \"cohort_start_date\",   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireFutureObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort on future observation — requireFutureObservation","text":"cohort cohort table cdm reference. minFutureObservation minimum number future observation days database. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable cohort contains date compute demographics characteristics restrict . name Name new cohort future observation restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireFutureObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort on future observation — requireFutureObservation","text":"cohort table records individuals satisfying future observation requirement","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireFutureObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort on future observation — requireFutureObservation","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor() cdm$cohort1 |>   requireFutureObservation(indexDate = \"cohort_start_date\",                            minFutureObservation = 30) #> # Source:   SQL [10 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          1 2001-05-30        2003-05-01      #>  2                    1          1 2003-05-02        2006-06-10      #>  3                    1          2 2000-05-04        2000-05-17      #>  4                    1          2 2000-05-18        2001-01-23      #>  5                    1          3 2015-01-27        2015-06-28      #>  6                    1          4 1996-06-30        1998-11-20      #>  7                    1          5 2012-03-20        2012-04-30      #>  8                    1          5 2012-05-01        2012-07-24      #>  9                    1          7 2014-03-07        2014-03-07      #> 10                    1          7 2014-03-08        2014-03-20"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireInDateRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Require that an index date is within a date range — requireInDateRange","title":"Require that an index date is within a date range — requireInDateRange","text":"Require index date within date range","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireInDateRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require that an index date is within a date range — requireInDateRange","text":"","code":"requireInDateRange(   cohort,   dateRange,   cohortId = NULL,   indexDate = \"cohort_start_date\",   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireInDateRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require that an index date is within a date range — requireInDateRange","text":"cohort cohort table cdm reference. dateRange window time index date must observed. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable cohort contains index date interest name Name new cohort restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireInDateRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require that an index date is within a date range — requireInDateRange","text":"cohort table cohort entries outside date range dropped","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireInDateRange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Require that an index date is within a date range — requireInDateRange","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor(nPerson = 100) cdm$cohort1 |>   requireInDateRange(indexDate = \"cohort_start_date\",                      dateRange = as.Date(c(\"2010-01-01\", \"2019-01-01\"))) #> # Source:   table<main.cohort1> [?? x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          6 2011-03-07        2014-01-24      #>  2                    1          7 2014-03-08        2014-03-19      #>  3                    1         13 2014-06-24        2014-06-29      #>  4                    1         13 2014-06-30        2014-08-07      #>  5                    1         17 2017-03-28        2017-04-05      #>  6                    1         18 2012-01-30        2012-05-21      #>  7                    1         24 2016-11-15        2016-11-22      #>  8                    1         24 2016-11-23        2016-11-29      #>  9                    1         24 2016-11-30        2017-01-25      #> 10                    1         31 2013-03-29        2014-02-09      #> # ℹ more rows"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsFirstEntry.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort to first entry by index date — requireIsFirstEntry","title":"Restrict cohort to first entry by index date — requireIsFirstEntry","text":"Restrict cohort first entry index date","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsFirstEntry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort to first entry by index date — requireIsFirstEntry","text":"","code":"requireIsFirstEntry(   cohort,   cohortId = NULL,   indexDate = \"cohort_start_date\",   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsFirstEntry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort to first entry by index date — requireIsFirstEntry","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Column name cohort contains date restrict . name Name new cohort restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsFirstEntry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort to first entry by index date — requireIsFirstEntry","text":"cohort table cdm reference.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsFirstEntry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort to first entry by index date — requireIsFirstEntry","text":"","code":"# \\donttest{ library(CohortConstructor) cdm <- mockCohortConstructor() cdm$cohort1 <- requireIsFirstEntry(cdm$cohort1) # }"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsLastEntry.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort to last entry by index date — requireIsLastEntry","title":"Restrict cohort to last entry by index date — requireIsLastEntry","text":"Restrict cohort last entry index date","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsLastEntry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort to last entry by index date — requireIsLastEntry","text":"","code":"requireIsLastEntry(   cohort,   cohortId = NULL,   indexDate = \"cohort_start_date\",   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsLastEntry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort to last entry by index date — requireIsLastEntry","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Column name cohort contains date restrict . name Name new cohort restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsLastEntry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort to last entry by index date — requireIsLastEntry","text":"cohort table cdm reference.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireIsLastEntry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort to last entry by index date — requireIsLastEntry","text":"","code":"# \\donttest{ library(CohortConstructor) library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 <- requireIsLastEntry(cdm$cohort1) # }"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requirePriorObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort on prior observation — requirePriorObservation","title":"Restrict cohort on prior observation — requirePriorObservation","text":"Restrict cohort prior observation","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requirePriorObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort on prior observation — requirePriorObservation","text":"","code":"requirePriorObservation(   cohort,   minPriorObservation,   cohortId = NULL,   indexDate = \"cohort_start_date\",   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requirePriorObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort on prior observation — requirePriorObservation","text":"cohort cohort table cdm reference. minPriorObservation minimum number prior observation days database. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable cohort contains date compute demographics characteristics restrict . name Name new cohort prior observation restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requirePriorObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort on prior observation — requirePriorObservation","text":"cohort table records individuals satisfying prior observation requirement","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requirePriorObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort on prior observation — requirePriorObservation","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor() cdm$cohort1 |>   requirePriorObservation(indexDate = \"cohort_start_date\",                           minPriorObservation = 365) #> # Source:   SQL [4 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          1 2003-05-02        2006-06-10      #> 2                    1          2 2000-05-04        2000-05-17      #> 3                    1          2 2000-05-18        2001-01-23      #> 4                    1          4 1996-06-30        1998-11-20"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort on sex — requireSex","title":"Restrict cohort on sex — requireSex","text":"Restrict cohort sex","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort on sex — requireSex","text":"","code":"requireSex(cohort, sex, cohortId = NULL, name = tableName(cohort))"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort on sex — requireSex","text":"cohort cohort table cdm reference. sex Can \"\", \"Male\" \"Female\". one latter, sex included. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. name Name new cohort sex requirements.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort on sex — requireSex","text":"cohort table records individuals satisfying sex requirement","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort on sex — requireSex","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor() cdm$cohort1 |>   requireSex(sex = \"Female\") #> # Source:   SQL [5 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          2 2000-05-04        2000-05-17      #> 2                    1          2 2000-05-18        2001-01-23      #> 3                    1          3 2015-01-27        2015-06-28      #> 4                    1          5 2012-03-20        2012-04-30      #> 5                    1          5 2012-05-01        2012-07-24"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireTableIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Require cohort subjects are present in another table — requireTableIntersectFlag","title":"Require cohort subjects are present in another table — requireTableIntersectFlag","text":"Require cohort subjects present another table","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireTableIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require cohort subjects are present in another table — requireTableIntersectFlag","text":"","code":"requireTableIntersectFlag(   cohort,   tableName,   window,   cohortId = NULL,   indexDate = \"cohort_start_date\",   targetStartDate = startDateColumn(tableName),   targetEndDate = endDateColumn(tableName),   censorDate = NULL,   negate = FALSE,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireTableIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require cohort subjects are present in another table — requireTableIntersectFlag","text":"cohort cohort table cdm reference. tableName Name table check intersect. window Window consider events . cohortId Vector cohort definition ids include. NULL, cohort definition ids used. indexDate Variable x contains date compute intersection. targetStartDate Date reference cohort table, either start (overlap) (incidence). targetEndDate Date reference cohort table, either end (overlap) NULL (incidence). censorDate Whether censor overlap events specific date column date x. negate set TRUE, criteria applied exclusion rather inclusion (.e. require absence another cohort). name Name new cohort future observation restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireTableIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require cohort subjects are present in another table — requireTableIntersectFlag","text":"Cohort table table kept (table negate = TRUE)","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/requireTableIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Require cohort subjects are present in another table — requireTableIntersectFlag","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor(drugExposure = TRUE) cdm$cohort1 |>   requireTableIntersectFlag(tableName = \"drug_exposure\",                             indexDate = \"cohort_start_date\",                             window = c(-Inf, 0)) #> # Source:   table<main.cohort1> [7 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          1 2003-05-02        2006-06-10      #> 2                    1          2 2000-05-04        2000-05-17      #> 3                    1          2 2000-05-18        2001-01-23      #> 4                    1          3 2015-01-27        2015-06-28      #> 5                    1          4 1996-06-30        1998-11-20      #> 6                    1          5 2012-05-01        2012-07-24      #> 7                    1          7 2014-03-08        2014-03-20"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/stratifyCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Crate a new cohort table with the specified stratifications. — stratifyCohorts","title":"Crate a new cohort table with the specified stratifications. — stratifyCohorts","text":"Crate new cohort table specified stratifications.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/stratifyCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crate a new cohort table with the specified stratifications. — stratifyCohorts","text":"","code":"stratifyCohorts(   cohort,   strata,   cohortId = NULL,   removeStrata = TRUE,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/stratifyCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crate a new cohort table with the specified stratifications. — stratifyCohorts","text":"cohort cohort table cdm reference. strata strata list point columns cohort table. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. removeStrata Whether remove strata columns final cohort table. name Name new cohort.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/stratifyCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crate a new cohort table with the specified stratifications. — stratifyCohorts","text":"Cohort table stratified.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/stratifyCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crate a new cohort table with the specified stratifications. — stratifyCohorts","text":"","code":"library(CohortConstructor) library(PatientProfiles)  cdm <- mockCohortConstructor()  cdm$my_cohort <- cdm$cohort1 |>   addAge(ageGroup = list(\"child\" = c(0, 17), \"adult\" = c(18, Inf))) |>   addSex() |>   stratifyCohorts(     strata = list(\"sex\", c(\"sex\", \"age_group\")), name = \"my_cohort\"   ) #> Warning: cohort_name must be snake case, the following cohorts will be renamed: #> • cohort_1_Female -> cohort_1_female #> • cohort_1_Male -> cohort_1_male #> • cohort_1_Female_adult -> cohort_1_female_adult #> • cohort_1_Female_child -> cohort_1_female_child #> • cohort_1_Male_adult -> cohort_1_male_adult #> • cohort_1_Male_child -> cohort_1_male_child  cdm$my_cohort #> # Source:   SQL [?? x 5] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>                   <int>      <int> <date>            <date>          <int> #>  1                    2          1 2001-05-30        2003-05-01          3 #>  2                    2          1 2003-05-02        2006-06-10          5 #>  3                    1          2 2000-05-04        2000-05-17         37 #>  4                    1          2 2000-05-18        2001-01-23         37 #>  5                    1          3 2015-01-27        2015-06-28         28 #>  6                    2          4 1996-06-30        1998-11-20         17 #>  7                    1          5 2012-03-20        2012-04-30         39 #>  8                    1          5 2012-05-01        2012-07-24         39 #>  9                    2          7 2014-03-07        2014-03-07         27 #> 10                    2          7 2014-03-08        2014-03-20         27 #> # ℹ more rows  settings(cdm$my_cohort) #> # A tibble: 6 × 8 #>   cohort_definition_id cohort_name           target_cohort_id target_cohort_name #>                  <int> <chr>                            <int> <chr>              #> 1                    1 cohort_1_female                      1 cohort_1           #> 2                    2 cohort_1_male                        1 cohort_1           #> 3                    3 cohort_1_female_adult                1 cohort_1           #> 4                    4 cohort_1_female_child                1 cohort_1           #> 5                    5 cohort_1_male_adult                  1 cohort_1           #> 6                    6 cohort_1_male_child                  1 cohort_1           #> # ℹ 4 more variables: target_cohort_table_name <chr>, strata_columns <chr>, #> #   sex <chr>, age_group <chr>  attrition(cdm$my_cohort) #> # A tibble: 16 × 7 #>    cohort_definition_id number_records number_subjects reason_id reason          #>                   <int>          <int>           <int>     <int> <chr>           #>  1                    1             10               6         1 Initial qualif… #>  2                    1              5               3         2 filter strata:… #>  3                    2             10               6         1 Initial qualif… #>  4                    2              5               3         2 filter strata:… #>  5                    3             10               6         1 Initial qualif… #>  6                    3              5               3         2 filter strata:… #>  7                    3              5               3         3 filter strata:… #>  8                    4             10               6         1 Initial qualif… #>  9                    4              5               3         2 filter strata:… #> 10                    4              0               0         3 filter strata:… #> 11                    5             10               6         1 Initial qualif… #> 12                    5              5               3         2 filter strata:… #> 13                    5              2               1         3 filter strata:… #> 14                    6             10               6         1 Initial qualif… #> 15                    6              5               3         2 filter strata:… #> 16                    6              3               2         3 filter strata:… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/subsetCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a cohort table using a subset of cohorts from another table. — subsetCohorts","title":"Generate a cohort table using a subset of cohorts from another table. — subsetCohorts","text":"Generate cohort table using subset cohorts another table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/subsetCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a cohort table using a subset of cohorts from another table. — subsetCohorts","text":"","code":"subsetCohorts(cohort, cohortId, name = tableName(cohort))"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/subsetCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a cohort table using a subset of cohorts from another table. — subsetCohorts","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL cohort selected. name Name new cohort demographic requirements.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/subsetCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a cohort table using a subset of cohorts from another table. — subsetCohorts","text":"Cohort table cohorts cohortId.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/subsetCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a cohort table using a subset of cohorts from another table. — subsetCohorts","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor(nPerson = 100)  cdm$cohort1 |> subsetCohorts(cohortId = 1) #> # Source:   table<main.cohort1> [?? x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          1 2001-02-15        2001-10-28      #>  2                    1          1 2001-10-29        2003-03-15      #>  3                    1          1 2003-03-16        2005-02-08      #>  4                    1          2 1999-11-11        2002-04-09      #>  5                    1          6 2011-03-07        2014-01-24      #>  6                    1          7 2014-03-08        2014-03-19      #>  7                    1         10 2019-12-04        2019-12-14      #>  8                    1         13 2014-06-24        2014-06-29      #>  9                    1         13 2014-06-30        2014-08-07      #> 10                    1         14 1986-11-29        1987-12-14      #> # ℹ more rows"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict cohort on patient demographics — trimDemographics","title":"Restrict cohort on patient demographics — trimDemographics","text":"Restrict cohort patient demographics","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict cohort on patient demographics — trimDemographics","text":"","code":"trimDemographics(   cohort,   cohortId = NULL,   ageRange = NULL,   sex = NULL,   minPriorObservation = NULL,   minFutureObservation = NULL,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict cohort on patient demographics — trimDemographics","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. ageRange list minimum maximum age. sex Can \"\", \"Male\" \"Female\". one latter, sex included. minPriorObservation minimum number prior observation days database. minFutureObservation minimum number future observation days database. name Name new cohort demographic requirements.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict cohort on patient demographics — trimDemographics","text":"cohort table records individuals satisfying demographic requirements","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict cohort on patient demographics — trimDemographics","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor(nPerson = 100)  cdm$cohort1 |> trimDemographics(sex = \"Male\") #> ℹ Building new trimmed cohort #> Adding demographics information #> Creating initial cohort #> Trim sex #> ✔ Cohort trimmed #> # Source:   table<main.cohort1> [?? x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          2 1999-11-11        2002-04-09      #>  2                    1          7 2014-03-08        2014-03-19      #>  3                    1         13 2014-06-30        2014-08-07      #>  4                    1         14 1987-12-15        1988-03-19      #>  5                    1         18 2012-01-30        2012-05-21      #>  6                    1         20 1990-10-19        1997-01-08      #>  7                    1         22 1996-04-27        1999-08-31      #>  8                    1         23 2001-02-04        2004-06-17      #>  9                    1         25 2019-06-16        2019-07-07      #> 10                    1         26 2007-02-24        2010-05-06      #> # ℹ more rows"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimToDateRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim cohort dates to be within a date range — trimToDateRange","title":"Trim cohort dates to be within a date range — trimToDateRange","text":"Trim cohort dates within date range","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimToDateRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim cohort dates to be within a date range — trimToDateRange","text":"","code":"trimToDateRange(   cohort,   dateRange,   cohortId = NULL,   startDate = \"cohort_start_date\",   endDate = \"cohort_end_date\",   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimToDateRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim cohort dates to be within a date range — trimToDateRange","text":"cohort cohort table cdm reference. dateRange window time index date must observed. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. startDate Variable earliest date. endDate Variable latest date. name Name new cohort restriction.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimToDateRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim cohort dates to be within a date range — trimToDateRange","text":"cohort table record timings updated within date range. records time outside range dropped.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/trimToDateRange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim cohort dates to be within a date range — trimToDateRange","text":"","code":"library(CohortConstructor) cdm <- mockCohortConstructor() cdm$cohort1 |>   trimToDateRange(startDate = \"cohort_start_date\",                   endDate = \"cohort_end_date\",                   dateRange = as.Date(c(\"2015-01-01\",                                         \"2015-12-31\"))) #> # Source:   table<main.cohort1> [1 x 4] #> # Database: DuckDB v0.10.2 [unknown@Linux 6.5.0-1021-azure:R 4.4.0/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          3 2015-01-27        2015-06-28"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/unionCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cohort from the union of different cohorts — unionCohorts","title":"Generate cohort from the union of different cohorts — unionCohorts","text":"Generate cohort union different cohorts","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/unionCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cohort from the union of different cohorts — unionCohorts","text":"","code":"unionCohorts(   cohort,   cohortId = NULL,   gap = 0,   cohortName = NULL,   name = tableName(cohort) )"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/unionCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cohort from the union of different cohorts — unionCohorts","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include. NULL, cohort definition ids used. gap Number days two subsequent cohort entries subject merged single cohort entry cohortName Name returned cohort. NULL, cohort name created collapsing individual cohort names, separated \"_\". name Name new cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/unionCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cohort from the union of different cohorts — unionCohorts","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/unionCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cohort from the union of different cohorts — unionCohorts","text":"","code":"# \\donttest{ library(CohortConstructor)  cdm <- mockCohortConstructor(nPerson = 100)  cdm$cohort2 <- cdm$cohort2 |> unionCohorts() #> Warning: `union_cohorts()` was deprecated in CDMConnector 1.1.0. #> ℹ Please use `cohort_union()` instead. settings(cdm$cohort2) #> Error in UseMethod(\"settings\"): no applicable method for 'settings' applied to an object of class \"c('cdm_table', 'GeneratedCohortSet', 'tbl_duckdb_connection', 'tbl_dbi', 'tbl_sql', 'tbl_lazy', 'tbl')\"  # }"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/yearCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a new cohort table restricting cohort entries to certain years — yearCohorts","title":"Generate a new cohort table restricting cohort entries to certain years — yearCohorts","text":"Generate new cohort table restricting cohort entries certain years","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/yearCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a new cohort table restricting cohort entries to certain years — yearCohorts","text":"","code":"yearCohorts(cohort, years, cohortId = NULL, name = tableName(cohort))"},{"path":"https://ohdsi.github.io/CohortConstructor/reference/yearCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a new cohort table restricting cohort entries to certain years — yearCohorts","text":"cohort cohort table cdm reference. years Numeric vector years use restrict observation . cohortId Cohort definition id use. NULL cohort definition ids settings used. name Name new cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/yearCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a new cohort table restricting cohort entries to certain years — yearCohorts","text":"cohort table.","code":""},{"path":"https://ohdsi.github.io/CohortConstructor/reference/yearCohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a new cohort table restricting cohort entries to certain years — yearCohorts","text":"","code":"library(CohortConstructor)  cdm <- mockCohortConstructor(nPerson = 100)  cdm$cohort1 <- cdm$cohort1 |> yearCohorts(years = 2000:2002) settings(cdm$cohort1) #> # A tibble: 3 × 5 #>   cohort_definition_id cohort_name   target_cohort_definition_id  year #>                  <int> <chr>                               <int> <int> #> 1                    1 cohort_1_2000                           1  2000 #> 2                    2 cohort_1_2001                           1  2001 #> 3                    3 cohort_1_2002                           1  2002 #> # ℹ 1 more variable: target_cohort_name <chr>"}]
